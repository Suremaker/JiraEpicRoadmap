@using JiraEpicRoadmapper.Contracts
@using JiraEpicRoadmapper.UI.Models
@inject IViewOptions ViewOptions;
@implements IDisposable;
<div class="epics-panel" style="width: @(Roadmap.TotalDays * LayoutSettings.DaySpan)px; height: @(Roadmap.TotalRows * LayoutSettings.RowHeight)px" @onclick="@(() => HandleCardSelection(null))">
    @foreach (var m in Roadmap.Timeline.GetMondays())
    {
        <DayIndicator Day="@m" />
        @if (m.Date.Day < 8)
        {
            @foreach (var p in Roadmap.Projects)
            {
                <ProjectHeader DayIndex="@m.Index" RowIndex="@p.ProjectRowIndex" Name="@p.Name" />
            }
        }
    }
    <TodayIndicator Day="@Roadmap.Timeline.Today" />
    @foreach (var e in Roadmap.EpicBlocks)
    {
        <EpicCardView Block="@e" Selected="@(SelectedBlock==e)" OnCardSelect="HandleCardSelection" />
    }
</div>

@code
{
    private IReadOnlyList<Epic> _epics;
    private DateTimeOffset? _today;
    private bool _triggerScrollToToday = true;
    public EpicVisualBlock SelectedBlock { get; private set; }
    public EpicsRoadmap Roadmap { get; private set; }
    [Parameter]
    public EventCallback<EpicVisualBlock> OnCardSelect { get; set; }

    [Parameter]
    public DateTimeOffset? Today
    {
        get => _today;
        set
        {
            _today = value;
            Roadmap = null;
        }
    }

    [Parameter]
    public IReadOnlyList<Epic> Epics
    {
        get => _epics;
        set
        {
            if (_epics != value)
            {
                _epics = value;
                Roadmap = null;
            }
        }
    }

    [Parameter]
    public EventCallback<int> OnScrollToTodayRequest { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Roadmap == null || !_triggerScrollToToday)
            return;

        _triggerScrollToToday = false;
        await OnScrollToTodayRequest.InvokeAsync(Roadmap.Timeline.Today.Index * LayoutSettings.DaySpan);
    }

    protected override void OnParametersSet()
    {
        if (Roadmap == null)
            OnEpicsUpdate();

        ViewOptions.OptionsChanged += UpdateRoadmap;
    }


    private void OnEpicsUpdate()
    {
        Roadmap = new EpicsRoadmap(Epics, Today);
        UpdateRoadmap();
    }

    private async Task HandleCardSelection(EpicVisualBlock card)
    {
        SelectedBlock = card;
        await OnCardSelect.InvokeAsync(card);
    }

    private void UpdateRoadmap()
    {
        Roadmap.UpdateLayout(new LayoutDesigner(), ViewOptions);
        StateHasChanged();
    }

    public void Dispose()
    {
        ViewOptions.OptionsChanged -= UpdateRoadmap;
    }
}
