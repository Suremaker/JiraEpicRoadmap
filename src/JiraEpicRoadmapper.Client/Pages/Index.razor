@page "/"
@using System.ComponentModel
@using System.Text
@using JiraEpicRoadmapper.Client.Model
@using JiraEpicRoadmapper.Models
@inject HttpClient Http
@inject ViewOptions ViewOptions
@inject IJSRuntime JSRuntime

@if (_timeline == null)
{
    <div class="loading banner">Loading...</div>
}
else
{
    <div class="controls">
        <div>
            <ToggleButton CheckedText="|&lt;" UncheckedText="|>" OnClick="TogglePanel" Checked="@PanelVisibility" />
            <Button Text="Refresh" Collapsed="@(!PanelVisibility)" OnClick="Refresh" />
            <ToggleButton CheckedText="Show dependencies" UncheckedText="Compact view" OnClick="@ToggleDependenciesView" Checked="@ViewOptions.CompactView" Collapsed="@(!PanelVisibility)" />
            <ToggleButton CheckedText="Show closed" UncheckedText="Hide closed" OnClick="@ToggleClosedView" Checked="@ViewOptions.HideClosedEpics" Collapsed="@(!PanelVisibility)" />
            <ToggleButton CheckedText="Show unplanned" UncheckedText="Hide unplanned" OnClick="@ToggleUnplannedView" Checked="@ViewOptions.HideUnplannedEpics" Collapsed="@(!PanelVisibility)" />
            <ToggleButton CheckedText="Show today" UncheckedText="Hide today" OnClick="@ToggleTodayIndicator" Checked="@ViewOptions.HideTodayIndicator" Collapsed="@(!PanelVisibility)" />
        </div>
        @if (SelectedBlock != null)
        {
            <EpicDetailsView Block="@SelectedBlock" Collapsed="@(!PanelVisibility)" />
        }
    </div>
    <div class="canvas" style="width: @(_timeline.MaxIndex * LayoutSettings.DaySpan)px; height: @(_timeline.TotalRows * LayoutSettings.RowHeight)px">
        @if (!ViewOptions.HideTodayIndicator)
        {
            @foreach (var d in _timeline.GetToday())
            {
                <div id="today" class="today" style="left: @(d.index * LayoutSettings.DaySpan)px; height: @(_timeline.TotalRows * LayoutSettings.RowHeight)px;"><br />@(d.day.ToString("dd/MM")) (today)</div>
            }
        }
        @foreach (var d in _timeline.GetMondays())
        {
            <div class="week" style="left: @(d.index * LayoutSettings.DaySpan)px; height: @(_timeline.TotalRows * LayoutSettings.RowHeight)px;">@(d.day.ToString("dd/MM"))</div>
            @if (d.day.Day < 8)
            {
                @foreach (var p in _timeline.Projects)
                {
                    <div class="project" style="left: @(d.index * LayoutSettings.DaySpan)px; top: @(p.ProjectRowIndex * LayoutSettings.RowHeight)px;">@(p.Name)</div>
                }
            }
        }
        @foreach (var e in _timeline.Epics)
        {
            <EpicBlockView CardColor="@GetColor(e.Epic.Project)" Block="e" OnBlockSelect="SelectBlock" Selected="@(e == SelectedBlock)" />
        }
        <svg style="width: @(_timeline.MaxIndex * LayoutSettings.DaySpan)px; height: @(_timeline.TotalRows * LayoutSettings.RowHeight)px" @onclick="@(() => SelectBlock(null))">
            @if (!ViewOptions.CompactView)
            {
                @foreach (var e in _timeline.Epics)
                {
                    @foreach (var eTo in e.Dependents.Where(x => x.IsVisible))
                    {
                        var color = eTo.StartIndex >= e.EndIndex ? "rgba(0,180,0,0.9)" : "rgba(180,0,0,0.9)";
                        <line x1="@((e.EndIndex) * LayoutSettings.DaySpan - LayoutSettings.CellMargin)" y1="@((e.Row + 0.5) * LayoutSettings.RowHeight)" x2="@(eTo.StartIndex * LayoutSettings.DaySpan + LayoutSettings.CellMargin)" y2="@((eTo.Row + 0.5) * LayoutSettings.RowHeight)" style="stroke: @(color); stroke-width: 1; stroke-dasharray: 5, 5" />
                    }
                }
            }
        </svg>
    </div>
}

@code {
    private static readonly string[] ProjectColors = new[]
    {
        "#9999ff",
        "#ff9999",
        "#99ff99",
        "#ffff99",
        "#ff99ff",
        "#99ffff"
    };
    private IReadOnlyDictionary<string, string> _projectColorMap = new Dictionary<string, string>();
    private Timeline _timeline;
    private bool PanelVisibility { get; set; }
    private EpicBlock SelectedBlock { get; set; }
    private bool _scroll;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_timeline == null || !_scroll)
            return;

        var today = _timeline.GetToday().Select(x => x.index).FirstOrDefault();
        await JSRuntime.InvokeVoidAsync("scroll", today * LayoutSettings.DaySpan, 0);
        _scroll = false;
    }

    private async Task Refresh()
    {
        _scroll = true;
        _timeline = null;
        SelectedBlock = null;
        _timeline = new Timeline(await Http.GetJsonAsync<Epic[]>("epics"));
        UpdateTimeline();
        _projectColorMap = _timeline.Projects
            .Select((p, i) => (p.Name, color: ProjectColors[i % ProjectColors.Length]))
            .ToDictionary(x => x.Name, x => x.color);
    }

    private string GetColor(string project)
    {
        return _projectColorMap.TryGetValue(project, out var color) ? color : "#afefff";
    }

    private void TogglePanel(bool visible) => PanelVisibility = visible;

    private void ToggleDependenciesView()
    {
        ViewOptions.ToggleShowDependencies();
        UpdateTimeline();
    }

    private void ToggleClosedView()
    {
        ViewOptions.ToggleClosedEpics();
        UpdateTimeline();
    }

    private void ToggleUnplannedView()
    {
        ViewOptions.ToggleUnplannedEpics();
        UpdateTimeline();
    }

    private void ToggleTodayIndicator()
    {
        ViewOptions.ToggleTodayIndicator();
        UpdateTimeline();
    }

    private void UpdateTimeline()
    {
        _timeline.UpdateLayout(ViewOptions);
    }

    private void SelectBlock(EpicBlock selectedBlock)
    {
        SelectedBlock = selectedBlock;
        if (selectedBlock != null)
            TogglePanel(true);
    }

}