@page "/"
@using System.Text
@using JiraEpicRoadmapper.Client.Model
@using JiraEpicRoadmapper.Models
@inject HttpClient Http

@if (_timeline == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="canvas" style="width: @(_timeline.MaxIndex* DaySpan)px;height:@(_timeline.TotalRows* RowHeight)px">
        @foreach (var d in _timeline.GetToday())
        {
            <div class="today" style="left: @(d.index*DaySpan)px; height: @(_timeline.TotalRows*RowHeight)px;"><br />@(d.day.ToString("dd/MM")) (today)</div>
        }
        @foreach (var d in _timeline.GetMondays())
        {
            <div class="week" style="left: @(d.index * DaySpan)px; height: @(_timeline.TotalRows * RowHeight)px;">@(d.day.ToString("dd/MM"))</div>
            @if (d.day.Day < 8)
            {
                @foreach (var p in _timeline.Projects)
                {
                    <div class="project" style="left: @(d.index * DaySpan)px; top: @(p.ProjectRowIndex * RowHeight)px;">@(p.Name)</div>
                }
            }
        }
        @foreach (var e in _timeline.EpicMap.Epics)
        {
            <a href="@(e.Epic.Url)" target="_blank" class="epic" style="left: @(e.StartIndex * DaySpan + CellMargin)px; width: @((e.EndIndex - e.StartIndex) * DaySpan - 2 * CellMargin)px; top: @(e.Row * RowHeight + RowMargin)px; height: @(TicketHeight)px;">
                <div class="epic-card" style="background-color: @(GetColor(e.Epic.Project))"><p>@(MapStatus(e.Epic))@(e.Epic.Summary)</p></div>
            </a>
        }
        <svg style="width: @(_timeline.MaxIndex* DaySpan)px;height:@(_timeline.TotalRows* RowHeight)px">
            @foreach (var e in _timeline.EpicMap.Epics)
            {
                @foreach (var eTo in e.Dependents)
                {
                    var color = eTo.StartIndex >= e.EndIndex ? "rgba(0,180,0,0.9)" : "rgba(180,0,0,0.9)";
                    <line x1="@((e.EndIndex) * DaySpan - CellMargin)" y1="@((e.Row+0.5) * RowHeight)" x2="@(eTo.StartIndex * DaySpan + CellMargin)" y2="@((eTo.Row+0.5) * RowHeight)" style="stroke:@(color); stroke-width: 1; stroke-dasharray:5,5" />
                }
            }
        </svg>
    </div>
}

@code {
    private static readonly int DaySpan = 60;
    private static readonly int CellMargin = 10;
    private static readonly int TicketHeight = 40;
    private static readonly int RowMargin = 10;
    private static readonly int RowHeight = TicketHeight + 2 * RowMargin;
    private static readonly string[] ProjectColors = new[]
    {
        "#9999ff",
        "#ff9999",
        "#99ff99",
        "#ffff99",
        "#ff99ff",
        "#99ffff"
    };
    private IReadOnlyDictionary<string, string> _projectColorMap = new Dictionary<string, string>();
    private Timeline _timeline;

    protected override async Task OnInitializedAsync()
    {
        _timeline = new Timeline(await Http.GetJsonAsync<Epic[]>("epics"));
        _projectColorMap = _timeline.Projects
            .Select((p, i) => (p.Name, color: ProjectColors[i % ProjectColors.Length]))
            .ToDictionary(x => x.Name, x => x.color);
    }

    private string GetColor(string project)
    {
        return _projectColorMap.TryGetValue(project, out var color) ? color : "#afefff";
    }

    private string MapStatus(Epic e)
    {
        var builder = new StringBuilder();
        if (string.Equals(e.Status, "done", StringComparison.OrdinalIgnoreCase))
            builder.Append("✔️");
        else if (string.Equals(e.Status, "in progress", StringComparison.OrdinalIgnoreCase))
            builder.Append("⚙️");
        else if (string.Equals(e.Status, "to do", StringComparison.OrdinalIgnoreCase))
            builder.Append("❔");

        if (!e.DueDate.HasValue || !e.StartDate.HasValue || e.StartDate > e.DueDate)
            builder.Append("⚠️");
        return builder.ToString();
    }

}